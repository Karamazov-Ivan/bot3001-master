#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:

# @dp.callback_query_handler(text="—Ç—É—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π callback_data")
#     async def call_main_menu(call: CallbackQuery):
#     await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id) 





# inline_btn_1 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 1', callback_data='btn1')

# # row_width=1 - –®–∏—Ä–∏–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# inline_kb_full = InlineKeyboardMarkup(row_width=1).add(inline_btn_1)

# inline_btn_3 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 3', callback_data='btn3')
# inline_btn_4 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 4', callback_data='btn4')
# inline_btn_5 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 5', callback_data='btn5')

# inline_kb_full.add(inline_btn_3, inline_btn_4, inline_btn_5)
# inline_kb_full.row(inline_btn_3, inline_btn_4, inline_btn_5)

# inline_kb_full.add(InlineKeyboardButton('–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞', callback_data='btn2'))
# inline_kb_full.insert(InlineKeyboardButton("query=''", switch_inline_query=''))
# inline_kb_full.insert(InlineKeyboardButton("query='qwerty'", switch_inline_query='qwerty'))
# inline_kb_full.insert(InlineKeyboardButton("Inline –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ", switch_inline_query_current_chat='wasd'))
# inline_kb_full.add(InlineKeyboardButton('–£—Ä–æ–∫–∏ aiogram', url='https://surik00.gitbooks.io/aiogram-lessons/content/'))


				# –•—ç–Ω–¥–ª–µ—Ä—ã:
		#_________________________


# @dp.callback_query_handler(lambda c: c.data == 'start')
# async def callback(message: Message):
#     await bot.send_message(
#         chat_id=message.from_user.id,
#         reply_markup=feel_good_kb,
#         text="–æ—Ç–ª–∏—á–Ω–æ")

                                # @dp.message_handler(Command('menu'))
                                # async def show_menu(message:types.Message):
                                #     await list_categories(message)


                                # async def list_categories(message: Union[types.Message, types.CallbackQuery], **kwargs):
                                #     markup = categories_keyboard()

                                # @dp.callback_query_handler(menu_cd.filter())
                                # async def navigate(call: types.CallbackQuery, callback_data: dict):
                                #     current_level = callback_data.get('level')
                                #     category = callback_data.get('subcategory')
                                #     item_id = callback_data.get('item_id')
                                    
                                #     levels = {
                                #         '0': list_categories,
                                        
                                #     }






# async def edit_msg(message: types.Message):
#     await bot.edit_message_text("–¢–∞–∫")
    
# –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
#with suppress(MessageNotModified):


# @dp.callback_query_handler(lambda f: f.data == "buy_premium")
# async def buy_premium(call: greet_main_kb):
#     await call.answer(cache_time=60,text="‚è≥")
 
#     text = [
#         '<b>–ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç</b>',
#         '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –º–æ—â—å –±–æ—Ç–∞.',
#         '',
#         '–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è  ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ  –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:',
#         '',
#         '<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1</b>: –±–ª–∞–±–ª–∞–±–ª–∞',
#         '',
#         '<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2</b>: –±–ª–∞–±–ª–∞–±–ª–∞',
#         '',
#         '<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>',
#         '<em>–¢—É—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏</em>'
#     ]
#     await call.message.edit_text('\n'.join(text), reply_markup=buy_premium_buttons)






# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
# async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
#     code = callback_query.data[-1]
#     if code.isdigit():
#         code = int(code)
#     if code == 2:
#         await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
#     elif code == 5:
#         await bot.answer_callback_query(
#             callback_query.id,
#             text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
#     else:
#         await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


# #–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
# @dp.message_handler(commands=['2'])
# async def process_command_2(message: types.Message):
#     await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=inline_kb_full)


#_____________________________________________________________________________________________________

# @dp.callback_query_handler(lambda c: c.data == 'start_button2')
# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, callback_data= dp.message_handler() )



# @dp.message_handler(commands=['1'])
# async def process_command_1(message: types.Message):
#     await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=inline_kb1)

# @dp.message_handler(commands='iq')
# async def process_hi1_command(message: types.Message):
#     await message.answer(text="–ú–µ–Ω—é:", reply_markup=greet_start_kb)


# @dp.message_handler(commands=['hi'])
# async def process_hi1_command(message: types.Message):
#     await message.reply("–ü–µ—Ä–≤–æ–µ - –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=greet_kb)






# await bot.send_message(text="–¢—ã –ø–µ—Ä–≤—ã–π", reply_markup=kb_key.button_bone, chat_id=call.from_user.id)

# @dp.message_handler(lambda message: emoji.demojize(message.text) == ':game_die:')
# async def text_handler(message: types.Message):
#     print("ok")
#     await bot.send_message(text="–¢—ã –ø–µ—Ä–≤—ã–π", reply_markup=kb_key.button_bone, chat_id=message.from_user.id)



# @dp.message_handler(text="lol")
# async def gaming(message: types.Message):
#     await bot.send_message(text="–¢—ã –ø–µ—Ä–≤—ã–π", reply_markup=kb_key.button_bone, chat_id=message.from_user.id)
                


# –ö–Ω–æ–ø–∫–∞ –∏–≥—Ä—ã


# @dp.callback_query_handler(text="game")
# async def game(call: types.CallbackQuery):
#     await bot.send_message("–í–æ —á—Ç–æ –∏–≥—Ä–∞–µ–º?", reply_markup=kb_key.game_kb)



# @dp.message_handler(commands="test4")
# async def with_hidden_link(message: types.Message):
#     await message.answer(
#         f"{fmt.hide_link('https://telegram.org/blog/video-calls/ru')}–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ "
#         f"–≤ 2020 –≥–æ–¥—É –≤ Telegram –ø–æ—è–≤—è—Ç—Å—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏!\n\n–û–±—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã "
#         f"–≤–æ–∑–Ω–∏–∫–ª–∏ –≤ Telegram –ª–∏—à—å –≤ 2017, –∑–∞–º–µ—Ç–Ω–æ –ø–æ–∑–∂–µ —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ê —Å–ø—É—Å—Ç—è —Ç—Ä–∏ –≥–æ–¥–∞, "
#         f"–∫–æ–≥–¥–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ø—Ä–∏—É—á–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –∏–∑-–∑–∞ —ç–ø–∏–¥–µ–º–∏–∏ "
#         f"–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞, –∫–æ–º–∞–Ω–¥–∞ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –∏ —Å–¥–µ–ª–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ "
#         f"–≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –Ω–∞ WebRTC!\n\nP.S. –∞ –µ—â—ë —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏ –ø—Ä–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ :)",
#         parse_mode=types.ParseMode.HTML)



# @dp.message_handler(commands=['help'])
# async def process_help_command(message: types.Message):
#     msg = text(bold('–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
#                '/voice', '/photo', '/group', '/note', '/file, /testpre', sep='\n')
#     await message.reply(msg, parse_mode='MARKDOWN')





# @dp.message_handler(commands=['start12'])
# async def bones(message: types.Message):
#     # keyboard_markup = types.InlineKeyboardMarkup()
#     # user_id_btn = types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—è –∏–∑ Inline –∫–Ω–æ–ø–∫–∏', callback_data= 'user_id')
#     # keyboard_markup.row(user_id_btn)
#     # await message.answer(f"–í–∞—à ID: {message.from_user.id}", reply_markup=keyboard_markup)
#     a = await bot.send_dice(emoji='üé≤', chat_id=message.from_user.id)
#     print(a)
#     print(message.message_id)
#     print(a['dice']['value'])


                                                    # import logging

                                                    # from aiogram import Bot, types
                                                    # from aiogram.utils import executor
                                                    # from aiogram.dispatcher import Dispatcher
                                                    # from aiogram.contrib.fsm_storage.memory import MemoryStorage
                                                    # from aiogram.contrib.middlewares.logging import LoggingMiddleware

                                                    # from config import TOKEN
                                                    # from utils import TestStates
                                                    # from messages import MESSAGES


                                                    # logging.basicConfig(format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
                                                    #                     level=logging.DEBUG)


                                                    # bot = Bot(token=TOKEN)
                                                    # dp = Dispatcher(bot, storage=MemoryStorage())

                                                    # dp.middleware.setup(LoggingMiddleware())


                                                    # @dp.message_handler(commands=['start'])
                                                    # async def process_start_command(message: types.Message):
                                                    #     await message.reply(MESSAGES['start'])


                                                    # @dp.message_handler(commands=['help'])
                                                    # async def process_help_command(message: types.Message):
                                                    #     await message.reply(MESSAGES['help'])


                                                    # @dp.message_handler(state='*', commands=['setstate'])
                                                    # async def process_setstate_command(message: types.Message):
                                                    #     argument = message.get_args()
                                                    #     state = dp.current_state(user=message.from_user.id)
                                                    #     if not argument:
                                                    #         await state.reset_state()
                                                    #         return await message.reply(MESSAGES['state_reset'])

                                                    #     if (not argument.isdigit()) or (not int(argument) < len(TestStates.all())):
                                                    #         return await message.reply(MESSAGES['invalid_key'].format(key=argument))

                                                    #     await state.set_state(TestStates.all()[int(argument)])
                                                    #     await message.reply(MESSAGES['state_change'], reply=False)


                                                    # @dp.message_handler(state=TestStates.TEST_STATE_1)
                                                    # async def first_test_state_case_met(message: types.Message):
                                                    #     await message.reply('–ü–µ—Ä–≤—ã–π!', reply=False)


                                                    # @dp.message_handler(state=TestStates.TEST_STATE_2[0])
                                                    # async def second_test_state_case_met(message: types.Message):
                                                    #     await message.reply('–í—Ç–æ—Ä–æ–π!', reply=False)


                                                    # @dp.message_handler(state=TestStates.TEST_STATE_3 | TestStates.TEST_STATE_4)
                                                    # async def third_or_fourth_test_state_case_met(message: types.Message):
                                                    #     await message.reply('–¢—Ä–µ—Ç–∏–π –∏–ª–∏ —á–µ—Ç–≤–µ—Ä—Ç—ã–π!', reply=False)


                                                    # @dp.message_handler(state=TestStates.all())
                                                    # async def some_test_state_case_met(message: types.Message):
                                                    #     with dp.current_state(user=message.from_user.id) as state:
                                                    #         text = MESSAGES['current_state'].format(
                                                    #             current_state=await state.get_state(),
                                                    #             states=TestStates.all()
                                                    #         )
                                                    #     await message.reply(text, reply=False)


                                                    # @dp.message_handler()
                                                    # async def echo_message(msg: types.Message):
                                                    #     await bot.send_message(msg.from_user.id, msg.text)


                                                    # async def shutdown(dispatcher: Dispatcher):
                                                    #     await dispatcher.storage.close()
                                                    #     await dispatcher.storage.wait_closed()


                                                    # if __name__ == '__main__':
                                                    #     executor.start_polling(dp, on_shutdown=shutdown)

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    # markup = types.ReplyKeyboardRemove()
    # await bot.send_message(message.from_user.id, 'text', reply_markup=markup)




# @dp.message_handler(state=Test.q2)
# async def answer_q2(message:types.Message, state:FSMContext):

#     cost_purpose_q2 = message.text

#     if not (cost_purpose_q2.isalpha()):
#         await bot.send_message(text="–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ! üò°", chat_id=message.from_user.id,)
#         await Test.q2.set()

#     else:

#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
#         await state.update_data(answer2=cost_purpose_q2)
#         # –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
#         data = await state.get_data()
        
#         # –ù–µ —É–≤–µ—Ä–Ω–µ, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ:
#         # answer = data.get("answer1", "answer2")
    
#         await message.answer("–°–ø–∞—Å–∏–±–æ, —è –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª üëå", reply_markup=kb_key.new_costs)
        
#         #Variant 1 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#         # –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å state
#         await state.finish()


#         print(data)
        
#         # Variant 2
#         #await state.reset_state()

#         #Variant 3 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ —Å—Ç–∏—Ä–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
#         #await state.rest_state(wirh_data=False)

# # –ü–æ—Ä—è–¥–æ–∫ handlers –≤–∞–∂–µ–Ω!!!!

# # –î–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞–∑–∞–¥
# # @dp.message_handler(state="*")
# # async def all_handlets(message: types.Message, state:FSMContext):
    

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    # markup = types.ReplyKeyboardRemove()
    # await bot.send_message(message.from_user.id, 'text', reply_markup=markup)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤:
# ~$ python3.9 -m pip install bs4
# pip install --upgrade Pillow


from aiogram.dispatcher.filters.state import StatesGroup, State


class Test(StatesGroup):
    q1 = State()
    q2 = State()

class Game(StatesGroup):
    g1 = State()

class Slot(StatesGroup):
    s1 = State()
