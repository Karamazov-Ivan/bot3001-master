
import asyncio
import logging
import config
import random
import kb_key
import usd_rub

from typing import Union
from aiogram import Bot, Dispatcher, executor, types
from os import getenv
from aiogram.utils.exceptions import BotBlocked
from sqler import SQLighter, SQL_file_record
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage #1
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Command
from info import Test, Game, Slot
from aiogram.dispatcher import FSMContext

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞ 
"""1#–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ –º—ã —É–∫–∞–∑–∞–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏,
—Ç–∞–∫ –∫–∞–∫ –ø–æ—Ç–µ—Ä—è —ç—Ç–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞–º –Ω–µ —Å—Ç—Ä–∞—à–Ω–∞ (–¥–∞ –∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã`—Ö —Ü–µ–ª–µ–π,
—Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏). –û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–∏—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Redis –∏ RethinkDB.

#2 –ù–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ—á–∫–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
–ù–∞ –Ω–µ–º –¥–æ–ª–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É - –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ä–∞–±–æ—Ç—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä,
–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–≥–¥–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞, —Ñ–æ—Ç–æ (–∏ —Ç.–ø.), –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª,
–≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤ –ª–æ–≥–∞—Ö —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ —ç—Ç–∏ –∞–ø–¥–µ–π—Ç—ã –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º."""

dp = Dispatcher(bot, storage=MemoryStorage()) #1
dp.middleware.setup(LoggingMiddleware()) #2

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('baza.db')
file_db = SQL_file_record('baza.db')



#________________________________________

       
# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä\–∫–Ω–æ–ø–∫–∞
@dp.message_handler(commands="start")
async def start(message: types.Message):
    me = await bot.get_me()
    await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAIBbWEBY0qJDXOtzVbO_Z76g3645-OlAAIFAAPANk8T-WpfmoJrTXUgBA")
    await message.answer(f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n–Ø - <b>{me.first_name}</b>, –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.
–ù–∞–ø–∏—à–∏ /help –≤ —á–∞—Ç, –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.
–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏ /menu.
–ñ–µ–ª–∞—é –ø—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã""", parse_mode='html')   

    
    if len(db.check_user(message.from_user.id)) > 0:    
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –≤ –ë–î")

        await message.answer("–ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å ‚ò∫Ô∏è")

    else:
        db.add_user(message.from_user.id, message.from_user.first_name)
        print(f"–î–∞–Ω–Ω—ã–µ {message.from_user.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")

        # –ò–º–∏—Ç–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        a = await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
        await asyncio.sleep(0.5)   
        for i in range(3):
            b = await bot.edit_message_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è..", chat_id=message.from_user.id, message_id=(a['message_id']))
            await asyncio.sleep(0.5)
            c = await bot.edit_message_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è...", chat_id=message.from_user.id, message_id=(b['message_id']))
            await asyncio.sleep(0.5)
            await bot.edit_message_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è....", chat_id=message.from_user.id, message_id=(c['message_id']))
            await asyncio.sleep(0.5)
            await bot.edit_message_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.", chat_id=message.from_user.id, message_id=(a['message_id']))
            await asyncio.sleep(0.5)
        await bot.edit_message_text("–ì–æ—Ç–æ–≤–æ. –í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É –Ω–∞—Å. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ üòõ",
        chat_id=message.from_user.id, message_id=(a['message_id']))

# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
# –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é "–ù–∞—á–∞—Ç—å!"
@dp.message_handler(commands="menu")
async def start(message: types.Message):
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª /start
    if len(db.check_user(message.from_user.id)) > 0:    
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –≤ –ë–î")
    else:
        db.add_user(message.from_user.id, message.from_user.first_name)
        print(f"–î–∞–Ω–Ω—ã–µ {message.from_user.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î")

    await bot.send_message(message.chat.id, text="–ü—Ä–∏—Å—Ç—É–ø–∏–º?", reply_markup=kb_key.start_kb)

# –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é "–ò–≥—Ä—ã\—Ñ–∏–Ω–∞–Ω—Å—ã"
@dp.callback_query_handler(text="start_bt")
async def send_random_value(call: types.CallbackQuery):
    await call.answer()
    # await call.message.answer(text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=kb_key.main_kb)
    # await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.edit_message_text(text = "<b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>",
    reply_markup=kb_key.main_kb,
    chat_id=call.from_user.id,
    message_id=call.message.message_id,
    parse_mode='html'
    )

# –ö–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
@dp.callback_query_handler(text="game")
async def gamekey(call: types.CallbackQuery):
    await bot.edit_message_text(text="–ù–µ –≥—É—Å—Ç–æ –∫–æ–Ω–µ—á–Ω–æ...",
    reply_markup=kb_key.game_kb, chat_id=call.from_user.id,
    message_id=call.message.message_id,
    parse_mode='html'
    )

# Bones
@dp.callback_query_handler(text="bones_game")
async def gamebone(call: types.CallbackQuery):
    await bot.edit_message_text(text="–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∏–µ: —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫—É–±–∏–∫–µ, —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏–ª. –í—Å—ë –ø—Ä–æ—Å—Ç–æ!\n–ù—É,—á—Ç–æ —Å–∫–∞–∂–µ—à—å? üßê",
    reply_markup=kb_key.game_bones_start,
    chat_id=call.from_user.id,
    message_id=call.message.message_id
    )
    
@dp.callback_query_handler(text="bones_game_start")
async def start_gaming(call: types.CallbackQuery):
    await bot.edit_message_text(text="–ù–∞–∂–º–∏ —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å",
    reply_markup=kb_key.thr_die_kb,
    chat_id=call.from_user.id,
    message_id=call.message.message_id
    )

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ñ—Ä–∞–∑–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã "–ö–æ—Å—Ç–∏"
victory = ("–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —è –ø–æ–±–µ–¥–∏–ª üòº", "–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å", "–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑",
    "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è.. –•–æ—Ç—è –Ω–µ—Ç, —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è üòà", "–ü—Ä–∏—Ö–æ–¥–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑, –º–æ–∂–µ—Ç —Ç–æ–≥–¥–∞ —Ç–µ–±–µ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ",
    "–ú–æ—è –≤–∑—è–ª–∞", "–•–µ-—Ö–µ-—Ö–µ, —è –ø–æ–±–µ–¥–∏–ª!!!")
lose = ("–°–µ–≥–æ–¥–Ω—è —Ç–æ—á–Ω–æ –Ω–µ –º–æ–π –¥–µ–Ω—å üòø", "–¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç, –¥–∞–π –º–Ω–µ –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è",
"–î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ—á–µ–∫", "–£–¥–∞—á–∞ –º–Ω—ë —É—â—ë —É–ª—ã–±–Ω—ë—Ç—Å—è", "–î—Ä—É–∂–æ—á–µ–∫, –¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ—á–µ–∫ üòâ",
"–Ø —Å–¥–∞—é—Å—å... üò≠\n–•–æ—Ç—è –∑–Ω–∞–µ—à—å —á—Ç–æ, –¥–∞–≤–∞–π –µ—â—ë!")

# –ò–≥—Ä–∞ –∫–æ—Å—Ç–∏
@dp.callback_query_handler(text="thr_die")
async def start_gaming1(call: types.CallbackQuery):
    await call.answer()
    await bot.delete_message(chat_id=call.from_user.id,message_id=call.message.message_id) # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_die = await bot.send_dice(chat_id=call.from_user.id)
    print(f"–û—á–∫–æ–≤ –Ω–∞ –∫—É–±–∏–∫–µ {user_die['dice']['value']}")
    await asyncio.sleep(4)
    await bot.send_message(text=f"–£ —Ç–µ–±—è –≤—ã–ø–∞–ª–æ {user_die['dice']['value']}",chat_id=call.from_user.id)
    await asyncio.sleep(2)
    await bot.send_message(text="–¢–µ–ø–µ—Ä—å –º–æ—è –æ—á–µ—Ä–µ–¥—å",chat_id=call.from_user.id)
    await asyncio.sleep(2)
    bot_die = await bot.send_dice(chat_id=call.from_user.id)
    await asyncio.sleep(4)
    print(f"–û—á–∫–æ–≤ –Ω–∞ –∫—É–±–∏–∫–µ {bot_die['dice']['value']}")
    await bot.send_message(text=f"–£ –º–µ–Ω—è {bot_die['dice']['value']}",chat_id=call.from_user.id)
    await asyncio.sleep(1)
    if ( bot_die['dice']['value'] ) > ( user_die['dice']['value'] ):
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ victory
        await bot.send_message(text=victory[random.randint(0, (len(victory)-1))], chat_id=call.from_user.id)
    elif ( bot_die['dice']['value'] ) < ( user_die['dice']['value'] ):
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ lose
        await bot.send_message(text=lose[random.randint(0, (len(lose)-1))], chat_id=call.from_user.id)
    else: await bot.send_message(text="–ù–∏—á—å—è ü§î", chat_id=call.from_user.id)
    await asyncio.sleep(1)
    await bot.send_message(text="–ò–≥—Ä–∞–µ–º –µ—â—ë?", reply_markup=kb_key.thr_die_again_kb, chat_id=call.from_user.id)

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å—á—ë—Ç
@dp.callback_query_handler(text="check_money")
async def start_gaming1_money(call: types.CallbackQuery):
    await call.answer()
    await bot.edit_message_text(text=f"–î–µ–Ω–µ–≥ –Ω–∞ —Å—á—ë—Ç–µ <b>{round(db.check_money(call.from_user.id)[0][0], 2)} ‚ÇΩ</b>",
    reply_markup=kb_key.back_game,
    chat_id=call.from_user.id,
    message_id=call.message.message_id,
    parse_mode='html'
    )


# –ö–æ—Å—Ç–∏ –Ω–∞ –æ—á–∫–∏
@dp.callback_query_handler(text="bones_game_money")
async def gamebone_money(call: types.CallbackQuery):
    await bot.edit_message_text(text="–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –∏ –∏–≥—Ä–∞–π. –ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∏–µ: —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫—É–±–∏–∫–µ, —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏–ª. –í—ã–∏–≥—Ä–∞–≤—à–∏–π –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫. –í—Å—ë –ø—Ä–æ—Å—Ç–æ!\n–ù—É,—á—Ç–æ —Å–∫–∞–∂–µ—à—å? üßê",
    reply_markup=kb_key.game_bones_money_start,
    chat_id=call.from_user.id,
    message_id=call.message.message_id
    )


@dp.callback_query_handler(text="bones_game_money_start",state=None)
async def new_game_money(message:types.Message):
    await message.answer()
    if db.check_money(message.from_user.id)[0][0] ==  0:
        await bot.edit_message_text(text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç!\n–£ —Ç–µ–±—è: <b>0</b>",
            reply_markup=kb_key.game_bones_money_start,
            chat_id=message.from_user.id,
            message_id=message.message.message_id,
            parse_mode='html'
            )

    elif len(db.check_money(message.from_user.id)) > 0:
        await bot.send_message(text=f"–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É\n–£ —Ç–µ–±—è –Ω–∞ —Å—á—ë—Ç–µ: {db.check_money(message.from_user.id)[0][0]}", chat_id=message.from_user.id,)
        await Game.g1.set()

@dp.message_handler(state=Game.g1)
async def answer_g1_money(message: types.Message, state:FSMContext):

    bet = message.text

    if not (bet.isdigit()):
        await bot.send_message(text="–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! üò°", chat_id=message.from_user.id,)
        await Game.g1.set()

    else:  
        if int(bet) > db.check_money(message.from_user.id)[0][0]:
            await bot.send_message(text="–£ —Ç–µ–±—è —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç! üò°", chat_id=message.from_user.id,)
            await Game.g1.set()
            
        else:

            await state.update_data(answer1=bet)

            # –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            data = await state.get_data()

            global data_bet
        
            data_bet = data['answer1'] # –í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏
            
            await message.answer("–°—Ç–∞–≤–∫–∞ –°–¥–µ–ª–∞–Ω–∞!\n–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫?", reply_markup=kb_key.thr_die_money_kb)
            
            await state.finish()
        
        


@dp.callback_query_handler(text="bones_game_money_start")
async def start_gaming_money(call: types.CallbackQuery):
    await bot.edit_message_text(text="–ù–∞–∂–º–∏ —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å",
    reply_markup=kb_key.thr_die_money_kb,
    chat_id=call.from_user.id,
    message_id=call.message.message_id
    )

@dp.callback_query_handler(text="thr_die_money")
async def start_gaming1_money(call: types.CallbackQuery):
    await call.answer()
    await bot.delete_message(chat_id=call.from_user.id,message_id=call.message.message_id) # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_die = await bot.send_dice(chat_id=call.from_user.id)
    print(f"–û—á–∫–æ–≤ –Ω–∞ –∫—É–±–∏–∫–µ {user_die['dice']['value']}")
    await asyncio.sleep(4.5)
    await bot.send_message(text=f"–£ —Ç–µ–±—è –≤—ã–ø–∞–ª–æ {user_die['dice']['value']}",chat_id=call.from_user.id)
    await asyncio.sleep(2)
    await bot.send_message(text="–¢–µ–ø–µ—Ä—å –º–æ—è –æ—á–µ—Ä–µ–¥—å",chat_id=call.from_user.id)
    await asyncio.sleep(2)
    bot_die = await bot.send_dice(chat_id=call.from_user.id)
    await asyncio.sleep(4.5)
    print(f"–û—á–∫–æ–≤ –Ω–∞ –∫—É–±–∏–∫–µ {bot_die['dice']['value']}")
    await bot.send_message(text=f"–£ –º–µ–Ω—è {bot_die['dice']['value']}",chat_id=call.from_user.id)
    await asyncio.sleep(1)
    
    bet = int(data_bet)


    if ( bot_die['dice']['value'] ) > ( user_die['dice']['value'] ):

        db.update_money(call.from_user.id, money=( bet * (-1)) ) # data_bet - global –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ answer_g1_money()
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ victory

        await bot.send_message(text=f"{victory[random.randint(0, (len(victory)-1))]}\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª: {bet}\n–û—Å—Ç–∞—Ç–æ–∫: {db.check_money(call.from_user.id)[0][0]}", chat_id=call.from_user.id)


    elif ( bot_die['dice']['value'] ) < ( user_die['dice']['value'] ):
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ lose
        db.update_money(call.from_user.id, money=( bet) ) # data_bet - global –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ answer_g1_money()
        await bot.send_message(text=f"{lose[random.randint(0, (len(lose)-1))]}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {bet * 2}\n–û—Å—Ç–∞—Ç–æ–∫: {db.check_money(call.from_user.id)[0][0]}", chat_id=call.from_user.id)

    else: await bot.send_message(text="–ù–∏—á—å—è ü§î", chat_id=call.from_user.id)
    await asyncio.sleep(1)
    await bot.send_message(text="–ò–≥—Ä–∞–µ–º –µ—â—ë?", reply_markup=kb_key.thr_die_again_money_kb, chat_id=call.from_user.id)




# # –ò–≥—Ä–∞ "–æ–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç"


@dp.callback_query_handler(text="bandit_game",state=None)
async def new_game_money(message:types.Message):
    await message.answer()
    if db.check_money(message.from_user.id)[0][0] ==  0:
        await bot.edit_message_text(text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç!\n–£ —Ç–µ–±—è: <b>0</b> ‚ÇΩ",
            reply_markup=kb_key.game_bones_money_start,
            chat_id=message.from_user.id,
            message_id=message.message.message_id,
            parse_mode='html'
            )

    elif len(db.check_money(message.from_user.id)) > 0:
        await bot.send_message(text=f"–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É\n–£ —Ç–µ–±—è –Ω–∞ —Å—á—ë—Ç–µ: {round(db.check_money(message.from_user.id)[0][0], 2)} ‚ÇΩ", chat_id=message.from_user.id,)
        await Slot.s1.set()



@dp.message_handler(state=Slot.s1)
async def answer_g1_money(message: types.Message, state:FSMContext):
    slot_bet = message.text
    if not (slot_bet.isdigit()):
        await bot.send_message(text="–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! üò°", chat_id=message.from_user.id,)
        await Slot.s1.set()
    else:  
        if int(slot_bet) > db.check_money(message.from_user.id)[0][0]:
            await bot.send_message(text="–£ —Ç–µ–±—è —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç! üò°", chat_id=message.from_user.id,)
            await Slot.s1.set()            
        else:
            await state.update_data(answer1=slot_bet)
            # –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            data = await state.get_data()
            global data_slot_bet
            data_slot_bet = data['answer1'] # –í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏
            await message.answer("–°—Ç–∞–≤–∫–∞ –°–¥–µ–ª–∞–Ω–∞!\n–ò–≥—Ä–∞–µ–º!", reply_markup=kb_key.spin_money_kb)          
            await state.finish()
        
        


@dp.callback_query_handler(text="spin_start")
async def start_gaming1_money(call: types.CallbackQuery):
    await call.answer()
    await bot.delete_message(chat_id=call.from_user.id,message_id=call.message.message_id) # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    db.update_money(call.from_user.id, money=int(data_slot_bet) * -1) # data_bet - global –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ answer_g1_money()
    # dice  = await bot.send_dice(emoji="üé∞", chat_id=call.from_user.id)

    slot_bet = int(data_slot_bet)
    freeze_bet = slot_bet / 5
    slot_list = []

    for i in range(5):
        

        dice = await bot.send_dice(emoji="üé∞", chat_id=call.from_user.id)
        await asyncio.sleep(2)
        count = await bot.send_message(text=f'–í –∏–≥—Ä–µ: {int(slot_bet)} ‚ÇΩ', chat_id=call.from_user.id)
        print(f"–û—á–∫–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ {dice['dice']['value']}")
        if (dice['dice']['value']) == 64:
            slot_bet *= 10
            await bot.send_sticker(call.from_user.id, "CAACAgIAAxUAAWERQlfTRSiy9OSsxm3j6WUxp5ifAAIDAQACVp29CgLl0XiH5fpPIAQ")
            await asyncio.sleep(4)
            if (dice['dice']['value']) in slot_list:
                slot_bet *= 100
                await bot.send_sticker(call.from_user.id, "CAACAgIAAxUAAWERQlfTRSiy9OSsxm3j6WUxp5ifAAIDAQACVp29CgLl0XiH5fpPIAQ")
                await asyncio.sleep(5)
        elif (dice['dice']['value']) == 1:
            slot_bet *= 4
            await bot.send_sticker(call.from_user.id, "CAACAgIAAxkBAAITi2ERSv-TKroix7uIPxpfbBgrYYE5AAIEAQAC9wLIDyAPdzvpq8hJIAQ")
            if (dice['dice']['value']) in slot_list:
                slot_bet *= 10
        elif (dice['dice']['value']) == 22:
            if (dice['dice']['value']) in slot_list:
                slot_bet *= 5
            slot_bet *= 3
        elif (dice['dice']['value']) == 43:
            slot_bet *= 2
        else:
            slot_bet -= freeze_bet

        slot_list.append(dice['dice']['value'])
        await asyncio.sleep(4)


    await bot.send_message(text=f"–í –∏—Ç–æ–≥–µ {int(slot_bet)} ‚ÇΩ", chat_id=call.from_user.id, reply_markup=kb_key.spin_money_again_kb)
    db.update_money(call.from_user.id, money=slot_bet) # data_bet - global –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ answer_g1_money()
    print(f"–Æ–∑–µ—Ä –≤—ã–∏–≥—Ä–∞–ª: {slot_bet}")
    
    


# –ö—É—Ä—Å –≤–∞–ª—é—Ç
@dp.callback_query_handler(text="rate")
async def costs_start(call: types.CallbackQuery):
    await call.answer()

    loading1 = await bot.send_message(text="–ó–∞–≥—Ä—É–∂–∞—é...", chat_id=call.from_user.id)

    await bot.edit_message_text(text=f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üá∫üá∏: {usd_rub.usd()}\n–ö—É—Ä—Å –µ–≤—Ä–æ üá™üá∫: {usd_rub.eur()}\n–ö—É—Ä—Å —Ç–µ–Ω–≥–µ üá∞üáø: {usd_rub.tng()}",
    chat_id=call.from_user.id,
    reply_markup=kb_key.rate,
    message_id=call.message.message_id
    )
    
    await bot.delete_message(chat_id=call.from_user.id, message_id=loading1['message_id'])


################################################

# async def foo():
#     print('Running in foo')
#     await asyncio.sleep(0)
#     print('Explicit context switch to foo again')


# async def bar():
#     print('Explicit context to bar')
#     await asyncio.sleep(0)
#     print('Implicit context switch back to bar')


# ioloop = asyncio.get_event_loop()
# tasks = [ioloop.create_task(foo()), ioloop.create_task(bar())]
# wait_tasks = asyncio.wait(tasks)
# ioloop.run_until_complete(wait_tasks)
# ioloop.close()


################################################



@dp.callback_query_handler(text="costs")
async def costs_start(call: types.CallbackQuery):
    await call.answer()
    if len(db.check_user_status(call.from_user.id)) == 0:
        await bot.edit_message_text(text=f"–ü—Ä–∏—Å—Ç—É–ø–∏–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å –ë–î –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
            chat_id=call.from_user.id,
            reply_markup=kb_key.create_db,
            message_id=call.message.message_id
            )
    else:
        await bot.edit_message_text(text=f"–ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É",
        chat_id=call.from_user.id,
        reply_markup=kb_key.new_costs,
        message_id=call.message.message_id
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –¥–ª—è —é–∑–µ—Ä–∞
@dp.callback_query_handler(text="create_new_db")
async def create_db(call: types.CallbackQuery):

    await call.answer()

    if len(db.check_user_status(call.from_user.id)) == 0:

        db.cost_create_table(call.from_user.id)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {call.from_user.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.first_name}")
        db.update_user_status(call.from_user.id, True)
        print(f"–î–ª—è —é–∑–µ—Ä–∞ {call.from_user.id} {call.from_user.first_name}, –∑–Ω–∞—á–µ–Ω–∏–µ status = True")
        a = await bot.send_message(text="–°–æ–∑–¥–∞—ë–º –ë–î.",chat_id=call.from_user.id)
        await asyncio.sleep(0.5)   
        for i in range(3):
            b = await bot.edit_message_text("–°–æ–∑–¥–∞—ë–º –ë–î..", chat_id=call.from_user.id, message_id=(a['message_id']))
            await asyncio.sleep(0.5)
            c = await bot.edit_message_text("–°–æ–∑–¥–∞—ë–º –ë–î...", chat_id=call.from_user.id, message_id=(b['message_id']))
            await asyncio.sleep(0.5)
            await bot.edit_message_text("–°–æ–∑–¥–∞—ë–º –ë–î....", chat_id=call.from_user.id, message_id=(c['message_id']))
            await asyncio.sleep(0.5)
            await bot.edit_message_text("–°–æ–∑–¥–∞—ë–º –ë–î.", chat_id=call.from_user.id, message_id=(a['message_id']))
            await asyncio.sleep(0.5)
        await bot.delete_message(message_id=(a['message_id']),chat_id=call.from_user.id)
        await bot.edit_message_text("–ì–æ—Ç–æ–≤–æ. –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–≤–æ—ë–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏",
        chat_id=call.from_user.id, message_id=call.message.message_id,reply_markup=kb_key.new_costs)
    else:
        print(f"–ë–î {call.from_user.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.first_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await bot.send_message(text="–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ë–î", chat_id=call.from_user.id, reply_markup=kb_key.new_costs)
        print(call.message.message_id)


##################################################################
#                        
#                            TEST

#_________________________________________________________________


@dp.callback_query_handler(text="new_costs",state=None)
async def create_new_cost(message:types.Message):
    await message.answer()
    await bot.send_message(text="–°–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Ç—Ä–∞—Ç–∏–ª?\n–ü—Ä–∏–º–µ—Ä:\n100500", chat_id=message.from_user.id,)
    
    #Variant 1
    await Test.q1.set()

    #Variant 2
    #await Test.first()
    #.next() or .last()

@dp.message_handler(state=Test.q1)
async def answer_q1(message: types.Message, state:FSMContext):



    # Variant 1
    cost_value_q1 = message.text

    if not (cost_value_q1.isdigit()):
        await bot.send_message(text="–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! üò°", chat_id=message.from_user.id,)
        await Test.q1.set()

    else:  
   
        # Variant 2
        # state = dp.current_state(chat=message.chat.id, users=messagae.from_user.id)


        # Variant 1
        await state.update_data(answer1=cost_value_q1)

        # Variant 2

        # await state.update_data(
        #     {"answer1": answer}
        #     )

        #Variant 3
        # async with state.proxy() as data:
        #     data["answer1"] = answer


        #–≠—Ç–æ:
        # async with state.proxy() as data:
        #     data["some_list"].append(1)
        # –†–∞–≤–Ω–æ —ç—Ç–æ–º—É:
        # data = await state.get_data()
        # some_list = data.get("some_list")
        # some_list.append(1)
        # await state.update_data(some_list=some_list)
        await message.answer("–ü–æ–∑–≤–æ–ª—å–∫–∞ —Å–ø—Ä–æ—Å–∏—Ç—å, –Ω–∞ —á—Ç–æ?", reply_markup=kb_key.coast_pyrpose)
      



        await Test.next()
        


@dp.message_handler(state=Test.q2)
async def answer_q2(message: types.Message, state:FSMContext):
    

    # –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑–±–∞–≤–ª—è–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–Ω–æ—Å–∏–º –≤ —Å–ø–∏—Å–æ–∫
    cost_purpose_q2 = (message.text.strip()).split()[0] 

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    # markup = types.ReplyKeyboardRemove()
    # await bot.send_message(message.from_user.id, 'text', reply_markup=markup)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(answer2=cost_purpose_q2)
    # –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ:
    # answer = data.get("answer1")

    a = await message.answer("–°–ø–∞—Å–∏–±–æ, —è –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª üëå", reply_markup=types.ReplyKeyboardRemove())
    await bot.delete_message(message_id=a['message_id'], chat_id=message.from_user.id)
    await bot.send_message(text="–°–ø–∞—Å–∏–±–æ, —è –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª üëå", chat_id=message.from_user.id, reply_markup=kb_key.new_costs)
    
    
    data['answer1'] # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥


    db.add_new_coast(message.from_user.id, count=data["answer1"], category=data["answer2"])
    db.update_money(message.from_user.id, money=data["answer1"])
    # Variant 1 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å state
    await state.finish()
    
    # Variant 2
    #await state.reset_state()

    #Variant 3 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ —Å—Ç–∏—Ä–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    #await state.rest_state(wirh_data=False)

@dp.callback_query_handler(text="last_5_cost")
async def last_5_cost(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5-—Ç–∏ —Ç—Ä–∞—Ç"""
    last_cost = db.last_5_coast(message.from_user.id)
    print(last_cost)
    await bot.edit_message_text(text=f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞—Ç:\n\n{last_cost[0]}\n{last_cost[1]}\n{last_cost[2]}\n{last_cost[3]}\n{last_cost[4]}",
        chat_id=message.from_user.id,
        message_id=message.message.message_id,
        reply_markup=kb_key.new_costs
        )

@dp.callback_query_handler(text="today_cost")
async def today_cost(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await message.answer()
    today_costs = db.today_cost(message.from_user.id)
   
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É tuple
        # –ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    y = ""
    for i in today_costs:       
        i = str(i)
        y += ("\n" + i)

    await bot.edit_message_text(text=f"–¢—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{y}",
        chat_id=message.from_user.id,
        message_id=message.message.message_id,
        reply_markup=kb_key.new_costs
        )
        

@dp.callback_query_handler(text="all_cost")
async def today_cost(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
    await message.answer()
    today_costs = db.all_cost(message.from_user.id)
   
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É tuple
        # –ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    y = ""
    for i in today_costs:       
        i = str(i)
        y += ("\n" + i)

    await bot.edit_message_text(text=f"–¢—Ä–∞—Ç—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n{y}",
        chat_id=message.from_user.id,
        message_id=message.message.message_id,
        reply_markup=kb_key.new_costs
        )



@dp.callback_query_handler(text="yesterday_cost")
async def today_cost(message: types.Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞ –≤—á–µ—Ä–∞"""
    await message.answer()
    yesterday_cost = db.yesterday_cost(message.from_user.id)
    print(db.yesterday_cost(message.from_user.id))

    y = ""
    for i in yesterday_cost:       
        i = str(i)
        y += ("\n" + i)

    await bot.edit_message_text(text=f"–¢—Ä–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞:\n\n{y}",
        chat_id=message.from_user.id,
        message_id=message.message.message_id,
        reply_markup=kb_key.new_costs
        )



##################################################################
#                        
#                            –§—É–Ω–∫—Ü–∏–∏ –ë–î

#_________________________________________________________________

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç—É.
@dp.message_handler(content_types=['photo'])
async def scan_message(msg: types.Message):
    document_id = msg.photo[0].file_id
    file_info = await bot.get_file(document_id)
    print(f'file_id: {file_info.file_id}')
    print(f'file_path: {file_info.file_path}')
    print(f'file_size: {file_info.file_size}')
    print(f'file_unique_id: {file_info.file_unique_id}')
    file_db.file_record(file_info.file_id, file_info.file_path, 'photo', msg.from_user.id)
    print(f'–î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î')

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É.
@dp.message_handler(content_types=['sticker'])
async def scan_message(msg: types.Message):
    document_id = msg.sticker.file_id
    file_info = await bot.get_file(document_id)
    print(f'file_id: {file_info.file_id}')
    print(f'file_path: {file_info.file_path}')
    print(f'file_size: {file_info.file_size}')
    print(f'file_unique_id: {file_info.file_unique_id}')
    file_db.file_record(file_info.file_id, file_info.file_path, "sticker", msg.from_user.id)
    print(f'–î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î')



##################################################################
#_________________________________________________________________



# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

@dp.message_handler(commands="test2")
async def cmd_test1(message: types.Message):
    await message.answer("Test 2")




    # –§–∏–∫—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞
    # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "try...except"
@dp.errors_handler(exception=BotBlocked)
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")

    # –¢–∞–∫–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True,
    # –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    return True

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
